# Copyright 2023 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-or-later


---
- name: "Prepare Manifests"
  ansible.builtin.set_fact:
    _str_manifests: >
      {{
        query('template', *_manifest_files)
        | map('split_regex', '^---$')
        | flatten
        | map('trim')
        | select
      }}

- name: "Display deployed template for all components"
  ansible.builtin.debug:
    msg: "{{ _str_manifests | list }}"
  when: lookup('env', 'DEBUG_MANIFESTS') | int == 1

# Because we are using the same field-manager for each reconciliation loop
# Removing a field from the manifest will effectively drop it from the resource
# Without this, null values are causing errors such as
# spec.workloads.synapse: Invalid value: "null" spec.workloads.synapse in body must be of type object
- name: "Construct Manifests"
  ansible.builtin.set_fact:
    _manifests: >
      {{
        _str_manifests
        | map('from_yaml')
        | map('drop_null_values')
        | select
        | map('combine', _generic_apply_mixin, recursive=true)
      }}

- name: Apply Manifest in check_mode
  check_mode: true
  kubernetes.core.k8s:
    resource_definition: "{{ _manifests }}"
  when: _manifests | length > 0
  register: result
  failed_when:
  - ('msg' in result)
  - ("in body must be of type object:" not in result.msg)
  - ("updates to statefulset spec for fields other than" not in result.msg)

- name: "Maintain resources that risk to not support recreation"
  kubernetes.core.k8s:
    resource_definition: "{{ _risky_manifests }}"
  vars:
    # noqa: jinja[invalid]
    _risky_manifests: >
      {{
        _manifests
        | selectattr('kind', 'eq', 'PersistentVolumeClaim')
      }}
  when: _risky_manifests | length > 0

- name: Maintain resources than support recreation
  ansible.builtin.include_tasks: "apply_then_recreate.yml"
  vars:
    # noqa: jinja[invalid]
    _filtered_manifests: >
      {{
        _manifests
        | rejectattr('kind', 'eq', 'PersistentVolumeClaim')
      }}
  loop: "{{ _filtered_manifests }}"
  loop_control:
    loop_var: "_manifest"
