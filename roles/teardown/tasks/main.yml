# Copyright 2023-2024 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-or-later


---
- name: "Find unused resources"
  vars:
    _label_selectors:
    - "app.kubernetes.io/managed-by={{ kind_managed_by }}"
    - "k8s.element.io/crdhash!={{ _crd_spec_hash }}"
    - "k8s.element.io/crdhash"
  ansible.builtin.set_fact:
    _teardown_candidates: |
      {% for kind_to_teardown in kinds_to_teardown %}
      {% if kind_to_teardown.api_version in _cluster_info.apis
          and kind_to_teardown.kind in _cluster_info.apis[kind_to_teardown.api_version] %}
      {{ query('k8s',
                namespace=ansible_operator_meta.namespace,
                kind=kind_to_teardown.kind,
                api_version=kind_to_teardown.api_version,
                label_selector=_label_selectors | join(',')
              )
        | mapattributes(['apiVersion', 'kind', 'metadata'])
        | to_nice_yaml }}
      ---
      {% endif %}
      {% endfor %}

# Filter the above lists to remove items without
# an ownerReferences that refers to kind
# `name: {{ ansible_operator_meta.name }}`
# Doing as two step process for debugging

- name: "Filter resources managed by this kind of CRD"
  ansible.builtin.set_fact:
    _teardown_candidates_with_correct_owner_kind: >-
      {{ _teardown_candidates
          | split("---")
          | select
          | map('from_yaml')
          | map('json_query', query)
          | flatten
      }}
  vars:
    query: "[?metadata.ownerReferences[?kind == `{{ kind_owner }}`]]"

- name: "Remove resources under control of something not named {{ ansible_operator_meta.name }}"
  ansible.builtin.set_fact:
    _to_teardown: "{{ _teardown_candidates_with_correct_owner_kind | json_query(query) }}"
  vars:
    query: "[?metadata.ownerReferences[?name == '{{ ansible_operator_meta.name }}']]"


- name: "Remove unused resources - {{ item.kind ~ '/' ~ item.apiVersion ~ '/' ~ item.metadata.name }}"
  kubernetes.core.k8s:
    state: absent
    definition: >-
      {{
        _to_teardown
      }}
