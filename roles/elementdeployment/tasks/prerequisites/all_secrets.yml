# Copyright 2023-2024 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-or-later


---
- name: Fetch components secrets
  vars:
    _secret_names: >-
      {{
        components
            | dict2items(key_name='component', value_name='properties')
            | map(attribute='properties')
            | flatten
            | map(attribute='secret_name')
      }}
  block:
  - name: "Fetch all components secrets"
    no_log: "{{ lookup('env', 'DEBUG_MANIFESTS') | int != 1 }}"
    ansible.builtin.set_fact:
      _all_secrets_yaml: |
        {% for item in _secret_names %}
        {{ query('kubernetes.core.k8s',
                    kind='Secret',
                    api_version='v1',
                    resource_name=item,
                    namespace=ansible_operator_meta.namespace)
          | to_nice_yaml
        }}
        ---
        {% endfor %}

  - name: Build all secrets variable
    no_log: "{{ lookup('env', 'DEBUG_MANIFESTS') | int != 1 }}"
    ansible.builtin.set_fact:
      _all_secrets: >-
        {{
          _all_secrets_yaml | split('---') | select | map('from_yaml') | flatten | select
        }}

  - name: Assert length of secrets
    vars:
      _components_ids_with_optional_secret_name: >-
        {{
          components_properties | selectattr('secret_name_is_optional', 'eq', true) | map(attribute='id')
        }}
      _mandatory_secret_names: >-
        {{
          ((components
            | dict2items
            | rejectattr('key', 'in', _components_ids_with_optional_secret_name)
            | rejectattr('key', 'eq', 'irc_bridges')
            | items2dict).values()
            | map(attribute='secret_name')
          ) + (components.irc_bridges
                | default([])
                | map(attribute='secret_name')
              )
        }}
    ansible.builtin.assert:
      that: >-
        (_all_secrets | selectattr('metadata.name', 'in', _mandatory_secret_names) | length) == (_mandatory_secret_names | length)
      msg: |
          Some component secret are missing
          Expected : {{ _mandatory_secret_names | join(', ') }}
          Found : {{ _all_secrets | map(attribute='metadata.name') | join(', ') }}

  - name: Assert that all secret keys are present in secrets
    vars:
      _missing_secret_keys_yaml: |
        {% for _component_name, _component_properties in _matrix_element_io_elementdeployment_spec.components.items() %}
        {% if _component_properties.secretName | default(false) %}
        {% for _secret_key in lookup('ansible.utils.to_paths',
                                      _component_properties | ansible.utils.keep_keys(target="SecretKey", matching_parameter="ends_with")) %}
        {% if lookup('ansible.utils.get_path', _component_properties, _secret_key) not in (
              (_all_secrets | selectattr('metadata.name', 'eq', _component_properties.secretName) | first).data | default({})
            ) %}
        - component: {{ _component_name }}
          secretKeyConfigurationProperty: {{ _secret_key }}
          absentFrom: {{ _component_properties.secretName }}/{{ lookup('ansible.utils.get_path', _component_properties, _secret_key) }}
        {% endif %}
        {% endfor %}
        {% endif %}
        {% endfor %}
    ansible.builtin.assert:
      that: >-
        _missing_secret_keys_yaml | from_yaml | default([], True) | length == 0
      msg: |
        The following secret keys do not point to any secret value :
        {{ _missing_secret_keys_yaml }}
