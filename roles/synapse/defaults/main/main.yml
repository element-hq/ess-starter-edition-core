# Copyright 2023-2024 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-or-later


---
image_repository: matrixdotorg/synapse
image_pull_secrets: []

image_synapse_has_digest: "{{ (image.digest | default('')) | length > 0 }}"
image_synapse_pull_policy: "{{ image_synapse_has_digest | ternary('IfNotPresent', 'Always') }}"
image_haproxy_has_digest: "{{ (image.haproxy_digest | default('')) | length > 0 }}"
image_haproxy_pull_policy: "{{ image_haproxy_has_digest | ternary('IfNotPresent', 'Always') }}"
image_redis_has_digest: "{{ (image.redis_digest | default('')) | length > 0 }}"
image_redis_pull_policy: "{{ image_redis_has_digest | ternary('IfNotPresent', 'Always') }}"

env_underrides: []
env_user: "{{ workloads.synapse.extra_env | default([]) }}"
env_overrides:
- name: SSL_CERT_DIR
  value: "/etc/ssl/certs"

# We convert all the items to dicts, merge them (removing duplicates), and extract them out to items again
env: "{{ {} | combine([env_underrides, env_user, env_overrides] | map('items2dict', key_name='name'))
            | dict2items(key_name='name') }}"

redis_image_repository: "redis"
redis_loglevel: "notice"

haproxy_image_repository: "haproxy"
haproxy_replicas: 2

secrets_hash: "{{ _fetched_synapse_secrets | hash('sha1') }}"

_parsed_synapse_secrets:
  database_password: "{{ _fetched_synapse_secrets[0].data['postgresPassword'] | b64decode }}"
  macaroon: "{{ _fetched_synapse_secrets[0].data['macaroon'] | b64decode }}"
  registration_shared: "{{ _fetched_synapse_secrets[0].data['registrationSharedSecret'] | b64decode }}"
config_instance_yaml: "{{ lookup('template', 'manifests/synapse_config_secrets.yaml.j2') }}"
log_config_yaml: "{{ lookup('template', 'log_config.yaml.j2') }}"
redis_config: "{{ lookup('template', 'redis.conf.j2') }}"

# media_storage_providers shouldn't be included if has_media as there's an implict filesystem provider of path media_store_path
# We do want it included if not has_media so that we can turn storage off
_include_media_storage_providers: "{{ not has_media }}"
