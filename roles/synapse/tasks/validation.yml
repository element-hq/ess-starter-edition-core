# Copyright 2023 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-or-later


---
- name: "Fetch Synapse secrets"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ config.external_secret.name }}"
  register: _fetched_synapse_secrets

- name: "Assert Synapse secret exists"
  ansible.builtin.assert:
    that:
    - _fetched_synapse_secrets.resources | length > 0
    - "'data' in _fetched_synapse_secrets.resources[0]"
    fail_msg: "spec.config.externalSecret.name must be a secret that exists within this namespace"

- name: "Assert Synapse secret configured correctly"
  ansible.builtin.assert:
    that:
    - item in _fetched_synapse_secrets.resources[0].data
    - _fetched_synapse_secrets.resources[0].data[item] | length > 0
    fail_msg: "The secret {{ config.external_secret.name }} must contain {{ item }}"
  loop:
  - macaroon
  - postgresPassword
  - registrationSharedSecret
  - signingKey

- name: "Fetch Synapse media volume"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ config.media.volume_claim }}"
  register: _synapse_media_volume_claim
#  when: "config.media.volume_claim is defined" when we have multiple modes of storing media

- name: "Assert Synapse media volume claim exists"
  ansible.builtin.assert:
    that:
    - _synapse_media_volume_claim.resources | length > 0
    fail_msg: "spec.config.media.volumeClaim must be a PersistentVolumeClaim that exists"

- name: "Assert supported number of workers"
  ansible.builtin.assert:
    that:
    - "item.instances is defined"
    - "item.instances > 0"
    - "(synapse_available_worker_types[item.type].single and item.instances == 1) or not synapse_available_worker_types[item.type].single"
    fail_msg: "spec.config.workers of type={{ item.type }} must correctly set instances. \
      single={{ synapse_available_worker_types[item.type].single }} for type={{ item.type }}"
  loop: "{{ synapse_workers }}"

- name: "Assert only single configuration of each worker type"
  ansible.builtin.assert:
    that:
    - "item.1 | length == 1"
    fail_msg: "spec.config.workers must have at most 1 instance of type={{ item.0 }}. It currently has {{ item.1 | length }}"
  loop: "{{ synapse_workers | groupby('type') }}"
