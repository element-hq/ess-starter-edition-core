{{- if $.Values.deployCrds }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ include "elementOperator.conversionWebhookFullname" . }}'
{{- if $.Values.crds.conversionWebhook.labels }}
    {{- toYaml $.Values.crds.conversionWebhook.labels | nindent 4 }}
{{- end }}
  name: '{{ include "elementOperator.conversionWebhookFullname" . }}'
  namespace: '{{ .Release.Namespace }}'
{{- if $.Values.crds.conversionWebhook.annotations }}
  annotations:
    {{- toYaml $.Values.crds.conversionWebhook.annotations | nindent 4 }}
{{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: '{{ include "elementOperator.conversionWebhookFullname" . }}'
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: conversion-webhook
{{- if $.Values.crds.conversionWebhook.annotations }}
        {{- toYaml $.Values.crds.conversionWebhook.annotations | nindent 8 }}
{{- end }}
      labels:
        app.kubernetes.io/instance: '{{ include "elementOperator.conversionWebhookFullname" . }}'
{{- if $.Values.crds.conversionWebhook.labels }}
        {{- toYaml $.Values.crds.conversionWebhook.labels | nindent 8 }}
{{- end }}
    spec:
    {{- if $.Values.crds.conversionWebhook.extraPodSpec }}
      {{- toYaml $.Values.crds.conversionWebhook.extraPodSpec | nindent 6 }}
    {{- end }}
{{- if $.Values.crds.conversionWebhook.imagePullSecret }}
      imagePullSecrets:
      - name: {{ tpl $.Values.crds.conversionWebhook.imagePullSecret . }}
{{- end }}
      containers:
      - name: conversion-webhook
        image: '{{ .Values.crds.conversionWebhook.image.repository }}{{ hasKey .Values.crds.conversionWebhook.image "digest" | ternary (print "@" .Values.crds.conversionWebhook.image.digest) (print ":" .Values.crds.conversionWebhook.image.tag) }}'
        imagePullPolicy: '{{ .Values.crds.conversionWebhook.imagePullPolicy }}'
        ports:
        - containerPort: 7443
          name: webhook-server
          protocol: TCP
        volumeMounts:
        - mountPath: /k8s-webhook-server/serving-certs
          name: webhook-cert
          readOnly: true
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /readyz
            port: 7443
          periodSeconds: 20
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /readyz
            port: 7443
          periodSeconds: 10
        startupProbe:
          httpGet:
            scheme: HTTPS
            path: /readyz
            port: 7443
          periodSeconds: 10
          initialDelaySeconds: 5
        args:
        - --tls-cert-file
        - /k8s-webhook-server/serving-certs/tls.crt
        - --tls-private-key-file
        - /k8s-webhook-server/serving-certs/tls.key
        - --port
        - "7443"
      {{- with $.Values.crds.conversionWebhook.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- if $.Values.crds.conversionWebhook.extraContainerSpec }}
        {{- toYaml $.Values.crds.conversionWebhook.extraContainerSpec | nindent 8 }}
      {{- end }}
      serviceAccountName: '{{ include "elementOperator.conversionWebhookFullname" . }}'
      terminationGracePeriodSeconds: 10
      volumes:
      - name: webhook-cert
        secret:
          defaultMode: 420
          secretName: {{ tpl $.Values.crds.conversionWebhook.tlsSecretName . }}
{{ end }}