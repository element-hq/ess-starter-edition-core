{{- if $.Values.deployManager }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: '{{ include "elementUpdater.controllerManagerFullname" . }}'
{{- if $.Values.updater.labels }}
    {{- toYaml $.Values.updater.labels | nindent 4 }}
{{- end }}
  name: '{{ include "elementUpdater.controllerManagerFullname" . }}'
  namespace: '{{ .Release.Namespace }}'
  annotations:
{{- if $.Values.updater.annotations }}
    {{- toYaml $.Values.updater.annotations | nindent 4 }}
{{- end }}
    k8s.element.io/ansible-cfg-hash: {{ include (print $.Template.BasePath "/configmap-ansible-cfg.yaml") . | sha256sum }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: '{{ include "elementUpdater.controllerManagerFullname" . }}'
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
{{- if $.Values.updater.annotations }}
        {{- toYaml $.Values.updater.annotations | nindent 8 }}
{{- end }}
      labels:
        app.kubernetes.io/instance: '{{ include "elementUpdater.controllerManagerFullname" . }}'
{{- if $.Values.updater.labels }}
        {{- toYaml $.Values.updater.labels | nindent 8 }}
{{- end }}
    spec:
    {{- if $.Values.updater.extraPodSpec }}
      {{- toYaml $.Values.updater.extraPodSpec | nindent 6 }}
    {{- end }}
{{- if $.Values.updater.imagePullSecret }}
      imagePullSecrets:
      - name: {{ tpl $.Values.updater.imagePullSecret . }}
{{- end }}
      initContainers:
      - command:
        - "/bin/sh"
        - "-xc"
        args:
        - rm -rfv /tmp/* /tmp/.* /.ansible/tmp/* /.ansible/tmp/.* || true
        env:
        {{- include "elementUpdater.managerEnv" . | nindent 8 }}
        image: '{{ .Values.updater.manager.image.repository }}{{ hasKey .Values.updater.manager.image "digest" | ternary (print "@" .Values.updater.manager.image.digest) (print ":" .Values.updater.manager.image.tag) }}'
        imagePullPolicy: '{{ .Values.updater.manager.imagePullPolicy }}'
        name: cleanup
      {{- with $.Values.updater.manager.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- if $.Values.updater.manager.extraContainerSpec }}
        {{- toYaml $.Values.updater.manager.extraContainerSpec | nindent 8 }}
      {{- end }}
        volumeMounts:
        - mountPath: /tmp
          name: manager-tmp
        - mountPath: /.ansible/tmp/
          name: ansible-tmp
      containers:
{{- if $.Values.clusterDeployment }}
      - args:
          - --secure-listen-address=0.0.0.0:8443
          - --proxy-endpoints-port=8789
          - --upstream=http://127.0.0.1:8080/
          - --logtostderr=true
          - --v=0
        image: '{{ .Values.updater.rbacProxy.image.repository }}{{ hasKey .Values.updater.rbacProxy.image "digest" | ternary (print "@" .Values.updater.rbacProxy.image.digest) (print ":" .Values.updater.rbacProxy.image.tag) }}'
        imagePullPolicy: '{{ .Values.updater.rbacProxy.imagePullPolicy }}'
        name: kube-rbac-proxy
      {{- with $.Values.updater.rbacProxy.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- if $.Values.updater.rbacProxy.extraContainerSpec }}
        {{- toYaml $.Values.updater.rbacProxy.extraContainerSpec | nindent 8 }}
      {{- end }}
        ports:
          - containerPort: 8443
            name: https
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8789
            scheme: HTTPS
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8789
            scheme: HTTPS
          periodSeconds: 10
        startupProbe:
          httpGet:
            path: /healthz
            port: 8789
            scheme: HTTPS
{{ end }}
      - args:
          - --health-probe-bind-address=:6789
          - --metrics-bind-address=0.0.0.0:8080
          - --leader-elect
          - --leader-election-id=element-updater
{{- if or .Values.updater.manager.resources.limits.memory .Values.updater.manager.maxReconciliationProcesses }}
{{- if .Values.updater.manager.maxReconciliationProcesses }}
          - --max-concurrent-reconciles={{ .Values.updater.manager.maxReconciliationProcesses }}
{{ else }}
          - --max-concurrent-reconciles={{ include "elementUpdater.managerMaxReconciliationProcesses" . }}
{{- end }}
{{- end }}
        env:
        {{- include "elementUpdater.managerEnv" . | nindent 8 }}
        image: '{{ .Values.updater.manager.image.repository }}{{ hasKey .Values.updater.manager.image "digest" | ternary (print "@" .Values.updater.manager.image.digest) (print ":" .Values.updater.manager.image.tag) }}'
        imagePullPolicy: '{{ .Values.updater.manager.imagePullPolicy }}'
        livenessProbe:
          httpGet:
            path: /healthz
            port: 6789
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 6789
          periodSeconds: 10
        startupProbe:
          httpGet:
            path: /readyz
            port: 6789
          periodSeconds: 10
          initialDelaySeconds: 5
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        name: manager
      {{- with $.Values.updater.manager.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- if $.Values.updater.manager.extraContainerSpec }}
        {{- toYaml $.Values.updater.manager.extraContainerSpec | nindent 8 }}
      {{- end }}
        volumeMounts:
        - mountPath: /tmp
          name: manager-tmp
        - mountPath: /.ansible/tmp/
          name: ansible-tmp
        - mountPath: /.ansible_async
          name: ansible-async
        - mountPath: /etc/ansible/ansible.cfg
          subPath: ansible.cfg
          readOnly: true
          name: ansible-cfg
      serviceAccountName: '{{ include "elementUpdater.controllerManagerFullname" . }}'
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir:
          medium: Memory
        name: manager-tmp
      - emptyDir:
          medium: Memory
        name: ansible-tmp
      - emptyDir:
          medium: Memory
        name: ansible-async
      - name: ansible-cfg
        configMap:
          name: {{ include "elementUpdater.controllerManagerFullname" . }}-ansible-cfg

{{ end }}
